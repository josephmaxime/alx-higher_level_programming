The ```0-add_integer module
======================

Using ``matrix_divided``
-------------------

    >>> add_integer = __import__("0-add_integer").add_integer

    >>> add_integer(2, 3)
    5

    >>> add_integer(2)
    100

It also works with floating-point and negatives values.

    >>> add_integer(2.0, 3)
    5

    >>> add_integer(18, -2)
    16

Non-Numbers
===========

Because ``+`` is only defined on data types numbers, not
for concatenate string or anothertype.

    >>> add_integer(18, "test")
    Traceback (most recent call last):
	...
    TypeError: b must be an integer

    >>> add_integer(8, [2, 5])
    Traceback (most recent call last):
	...
    TypeError: b must be an integer

    >>> add_integer({"question" : "answer"})
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
	...
    TypeError: a must be an integer

    >>> add_integer(float('nan'), float('nan'))
    Traceback (most recent call last):
	...
    ValueError: cannot convert float NaN to integer

cannot convert float infinity to integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
	...
    OverflowError: cannot convert float infinity to integer
