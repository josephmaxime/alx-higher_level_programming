==================
Add integer test.
==================

Numbers
=======

``add_integer()`` returns the somme of its arguments.  For numbers,

that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__("0-add_integer").add_integer

    >>> add_integer(2, 3)

    5

    >>> add_integer(2)

    100

It also works with floating-point and negatives values.

::

    >>> add_integer(2.0, 3)

    6

    >>> add_integer(18, -2)

    16

Non-Numbers
===========

Because ``+`` is only defined on data types numbers, not
for concatenate string or anothertype.

::

    >>> add_integer('a', 3)

    Traceback (most recent call last):
	...
    TypeError: b must be an integer

    >>> add_integer(8, [2, 5]

    Traceback (most recent call last):
	...
    TypeError: b must be an integer

    >>> add_integer({"question" : "answer"})

    >>> add_integer(None)

    Traceback (most recent call last):
	...
    TypeError: b must be an integer
